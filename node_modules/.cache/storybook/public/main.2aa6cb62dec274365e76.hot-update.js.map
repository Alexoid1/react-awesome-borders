{"version":3,"file":"main.2aa6cb62dec274365e76.hot-update.js","sources":["webpack:///./src/TestComponent/Border.tsx","webpack:///./src/TestComponent/helpers/unitConverter.ts"],"sourcesContent":["import * as React from 'react'\nimport { createAnimation } from \"./helpers/animation\";\nimport { cssValue } from \"./helpers/unitConverter\";\n\nexport default function Border({\n  children, \n  width=\"inherit\", \n  height=\"500px\"\n        }) {\n  \n  const toTop= createAnimation(\n    \"to-top\",\n    `100% { bottom: 200% }`\n  );\n\n  const toBottom= createAnimation(\n    \"to-bottom\",\n    `100% { top: 200% }`\n  );\n\n  const toRight= createAnimation(\n    \"to-right\",\n    `100% { left: 200% }`\n  );\n\n  const toLeft= createAnimation(\n    \"to-left\",\n    `100% { right: 200% }`\n  )\n\n  let cssOveride = {...a}\n\n  const wrapper : React.CSSProperties ={\n    marginInline: \"auto\",\n    position: \"relative\",\n    width: cssValue(width),\n    height: cssValue(height),\n    backgroundColor: \"white\",\n    overflow: \"hidden\",\n\n  }\n\n\n  const cardLineLeft : React.CSSProperties={\n    position: \"absolute\",\n    animation: `${toTop} 1s linear infinite`,\n    background: \"linear-gradient(to bottom, #2bd9e9, #5c60e200)\",\n    left: \"0\",\n    bottom: \"-100%\",\n    width: \"5px\",\n    height: \"100%\",\n   \n  }\n\n  const cardLineRight : React.CSSProperties={\n    position: \"absolute\",\n    animation: `${toBottom} 1s linear infinite`,\n    background: \"linear-gradient(to bottom, #5c60e200, #2bd9e9)\",\n    right: \"0\",\n    top: \"-100%\",\n    width: \"5px\",\n    height: \"100%\"\n  }\n\n  const cardLineTop : React.CSSProperties={\n    position: \"absolute\",\n    animation: `${toRight} 1s linear infinite`,\n    animationDelay: \"1.5s\",\n    background: \"linear-gradient(to right, #5c60e200, #2bd9e9)\",\n    top: \"0\",\n    width: \"100%\",\n    height: \"5px\",\n    left: \"-100%\"\n  }\n\n  const cardLineBottom : React.CSSProperties={\n    position: \"absolute\",\n    animation: `${toLeft} 1s linear infinite`,\n    animationDelay: \"1.5s\",\n    background: \"linear-gradient(to right, #2bd9e9, #5c60e200)\",\n    bottom: \"0\",\n    right: \"-100%\",\n    width: \"100%\",\n    height: \"5px\"\n  }\n  return (\n    <div style={wrapper} {...additionalprops}>\n      <div aria-hidden=\"true\" >\n        <span style={cardLineLeft}></span>\n        <span style={cardLineRight}></span>\n        {children}\n        <span style={cardLineTop}></span>\n        <span style={cardLineBottom}></span>\n      </div>\n    </div>\n  )\n}\n","interface LengthObject {\n    value: number;\n    unit: string;\n  }\n  \n  const cssUnit: { [unit: string]: boolean } = {\n    cm: true,\n    mm: true,\n    in: true,\n    px: true,\n    pt: true,\n    pc: true,\n    em: true,\n    ex: true,\n    ch: true,\n    rem: true,\n    vw: true,\n    vh: true,\n    vmin: true,\n    vmax: true,\n    \"%\": true,\n  };\n  \n  /**\n   * If size is a number, append px to the value as default unit.\n   * If size is a string, validate against list of valid units.\n   * If unit is valid, return size as is.\n   * If unit is invalid, console warn issue, replace with px as the unit.\n   *\n   * @param {(number | string)} size\n   * @return {LengthObject} LengthObject\n   */\n  export function parseLengthAndUnit(size: number | string): LengthObject {\n    if (typeof size === \"number\") {\n      return {\n        value: size,\n        unit: \"px\",\n      };\n    }\n    let value: number;\n    const valueString: string = (size.match(/^[0-9.]*/) || \"\").toString();\n    if (valueString.includes(\".\")) {\n      value = parseFloat(valueString);\n    } else {\n      value = parseInt(valueString, 10);\n    }\n  \n    const unit: string = (size.match(/[^0-9]*$/) || \"\").toString();\n  \n    if (cssUnit[unit]) {\n      return {\n        value,\n        unit,\n      };\n    }\n  \n    console.warn(`React Spinners: ${size} is not a valid css value. Defaulting to ${value}px.`);\n  \n    return {\n      value,\n      unit: \"px\",\n    };\n  }\n  \n  /**\n   * Take value as an input and return valid css value\n   *\n   * @param {(number | string)} value\n   * @return {string} valid css value\n   */\n  export function cssValue(value: number | string): string {\n    const lengthWithunit = parseLengthAndUnit(value);\n  \n    return `${lengthWithunit.value}${lengthWithunit.unit}`;\n  }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAIA;AAHA;AACA;AAAA;AACA;AAGA;AAKA;AAKA;AAKA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}